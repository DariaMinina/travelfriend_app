name: server_CI

on:
  push:
    branches: [ "main", "feature/server" ]
  pull_request:
    branches: [ "main", "feature/server" ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14.8
        env:
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
        ports:
          - 5432:5432
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r server/requirements.txt

    - name: Create .env file
      run: |
        echo "SECRET_KEY= ${{ secrets.SECRET_KEY }}" >> server/app/.env
        echo "DATABASE_URL=${{ vars.DATABASE_URL }}" >> server/app/.env
        echo "SERVER_NAME=${{ vars.SERVER_NAME }}" >> server/app/.env
        echo "UPLOAD_FOLDER=uploads" >> server/app/.env
        echo "MAX_CONTENT_LENGTH=16777216" >> server/app/.env
    - name: Run tests
      env:
        FLASK_ENV: testing
        FLASK_CONFIG: config.TestConfig
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
        export $(cat server/app/.env | xargs)
        coverage run -m pytest server/tests/
    - name: Generate coverage report
      run: coverage xml -o reportPythonTest.xml
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: reportPythonTest
        path: reportPythonTest.xml
        
  sonarqube-validate-job:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up SonarQube
        uses: sonarsource/sonar-scanner-action@master
      - name: Run SonarQube analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_USER_HOME: "${{ github.workspace }}/agent/sonar"
        run: |
          sonar-scanner \
            -Dsonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
            -Dsonar.login="${{ secrets.SONAR_TOKEN }}"  
  build:
    needs: test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14.8
        env:
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
        ports:
          - 5432:5432
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r server/requirements.txt

    - name: Create .env file
      run: |
        echo "SECRET_KEY= ${{ secrets.SECRET_KEY }}" >> server/app/.env
        echo "DATABASE_URL=${{ vars.DATABASE_URL }}" >> server/app/.env
        echo "SERVER_NAME=${{ vars.SERVER_NAME }}" >> server/app/.env
        echo "UPLOAD_FOLDER=uploads" >> server/app/.env
        echo "MAX_CONTENT_LENGTH=16777216" >> server/app/.env

    - name: SonarQube Quality Gate Check
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
